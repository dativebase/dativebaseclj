(ns dvb.common.openapi.spec.components.form
  "OpenAPI specs for form-related components.

   - `Form`
   - `FormWrite`
   - `PageOfForms`

   A 200 response to `GET /forms` will contain a JSON response body that
   conforms to `PageOfForms`. It is a collection of `Form` objects, with metadata
   to support opaque pagination. For details on the opaque token pagination
   strategy encoded by this response schema, see

   - https://developer.twitter.com/en/docs/twitter-api/pagination")

;; `Form`
(def form
  {:type :object
   :properties
   {:id {:type :string
         :format :uuid
         :description "The unique identifier of the form. This is a UUID that is generated by the OLD."
         :example "f9a19ceb-fca4-4e96-a5cb-cf1e329763a0"}
    :transcription {:type :string
                    :description "The orthographic transcription of the form."
                    :example "Les chiens mangaient."}
    :old-slug {:type :string
               :description "The unique identifier of the OLD. The slug should only contain letters, numbers, and the dash or the underscore."
               :example "lan-old"}
    :created-at {:type :string
                 :format :date-time
                 :description "The date and time at which the form was created."
                 :example "2023-08-20T01:34:11.780Z"}
    :updated-at {:type :string
                 :format :date-time
                 :description "The date and time at which the form was updated."
                 :example "2023-08-20T01:34:11.780Z"}
    :destroyed-at {:type :string
                   :format :date-time
                   :nullable true
                   :description "The date and time at which the form was destroyed; NULL if the user has not been destroyed."
                   :example nil}
    :created-by {:type :string
                 :format :uuid
                 :description "The ID (UUID) of the user who created the form."
                 :example "9328472d-c4d4-4d02-b444-1dd0de3479d3"}}
   :required [:id
              :transcription
              :old-slug
              :created-by
              :created-at
              :updated-at
              :destroyed-at]
   :example {:id "f9a19ceb-fca4-4e96-a5cb-cf1e329763a0"
             :transcription "Les chiens mangaient."
             :old-slug "lan-old"
             :created-by "9328472d-c4d4-4d02-b444-1dd0de3479d3"
             :created-at "2023-08-20T01:34:11.780Z"
             :updated-at "2023-08-20T01:34:11.780Z"
             :destroyed-at nil}})

;; `FormWrite`
(def form-write
  {:type :object
   :properties
   {:transcription {:type :string
                    :description "The orthographic transcription of the form."
                    :example "Les chiens mangeaient."}}
   :required [:transcription]
   :example {:transcription "Les chiens mangeaient."}})

;; `PageOfForms`
(def page-of-forms
  {:type :object
   :properties {:data {:type :array
                       :description "The forms returned as response to a GET index type request."
                       :items {:$ref "#/components/schemas/Form"}}
                :meta {:type :object
                       :properties {:count {:type :integer
                                            :description "The count of all forms in this OLD."
                                            :example 1234}
                                    :page {:type :integer
                                           :description "The 0-based index of the page of forms being returned. This value only makes sense given a count of forms in the target OLD and the value of items-per-page."
                                           :default 0
                                           :example 0}
                                    :items-per-page {:type :integer
                                                     :enum [1 5 10 50]
                                                     :description "The maximum number of forms in a page of forms."
                                                     :default 10
                                                     :example 10}}
                       :required [:count :page :items-per-page]
                       :example {:count 1234
                                 :page 0
                                 :items-per-page 10}}}
   :required [:data
              :meta]
   :example {:data [{:id "f9a19ceb-fca4-4e96-a5cb-cf1e329763a0"
                     :transcription "Les chiens mangaient."
                     :old-slug "lan-old"
                     :created-by "9328472d-c4d4-4d02-b444-1dd0de3479d3"
                     :created-at "2023-08-20T01:34:11.780Z"
                     :updated-at "2023-08-20T01:34:11.780Z"
                     :destroyed-at nil}]
             :meta {:count 1234
                    :page 0
                    :items-per-page 1}}})

;; `NewFormData`
;; TODO: add more data to this ...
;; - grammaticalities
;; - elicitation_methods
;; - tags
;; - syntactic_categories
;; - speakers
;; - users
;; - sources
(def new-form-data
  {:type :object
   :properties
   {:grammaticalities
    {:type :array
     :description "The available grammaticalities that can be specified for forms in this OLD."
     :items {:type :string
             :description "A grammaticality"
             :example "*"}}}
   :required [:grammaticalities]
   :example {:grammaticalities ["*"]}})

;; `EditFormData`
(def edit-form-data new-form-data)

(def example-forms-search
  {:operator :and
   :complement
   [{:resource :translation
     :attribute :transcription
     :operator :like
     :value "1"}
    {:operator :not
     :complement
     {:resource :form
      :attribute :morpheme-break
      :operator :regex
      :value "[28][5-7]"}}
    {:operator :or
     :complement
     [{:resource :form
       :attribute :datetime-modified
       :operator :less-than
       :value "2012-03-01T00:00:00"}
      {:resource :form
       :attribute :datetime-modified
       :operator :greater-than
       :value "2012-01-01T00:00:00"}]}]})

;; TODO
;; `FormsSearch`
(def forms-search
  {:type :object
   :properties
   {:query
    {:type :object
     :properties
     {:filter {:type :object}
      :order-by {:type :object}}
     :required [:filter]}
    :paginator {:type :object}}
   :required [:query]
   :example {:query {:filter {}}}})
