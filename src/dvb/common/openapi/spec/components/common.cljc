(ns dvb.common.openapi.spec.components.common
  (:require [dvb.common.utils :as u]))

(def date-time-property
  {:type :string
   :format :date-time
   :example "2023-08-20T01:34:11.780Z"})

(def nullable-date-time-property
  (assoc date-time-property
         :nullable true
         :example nil))

(def entity-id-property
  {:type :string
   :format :uuid
   :example "9328472d-c4d4-4d02-b444-1dd0de3479d3"})

(defn id-property [resource]
  {:type :string
   :format :uuid
   :description
   (u/format "The unique identifier of the %s. This is a UUID that is generated by DativeBase."
             resource)
   :example "f9a19ceb-fca4-4e96-a5cb-cf1e329763a0"})

(defn old-slug-property [resource]
  {:type :string
   :description (u/format "The unique identifier of the OLD to which this %s belongs." resource)
   :example "lan-old"})

(defn created-at-property [resource]
  (assoc date-time-property
         :description
         (u/format "The date and time at which the %s was created." resource)))

(defn updated-at-property [resource]
  (assoc date-time-property
         :description
         (u/format "The date and time at which the %s was last updated." resource)))

(defn destroyed-at-property [resource]
  (assoc nullable-date-time-property
         :description
         (u/format "The date and time at which the %s was destroyed; NULL if the %s has not been destroyed."
                   resource resource)))

(defn created-by-property [resource]
  (assoc entity-id-property
         :description
         (u/format "The ID (UUID) of the user who created the %s." resource)))

(defn updated-by-property [resource]
  (assoc entity-id-property
         :description
         (u/format "The ID (UUID) of the user who last updated the %s." resource)))

(defn page-of-entities-data-property [resource-pl item-schema]
  {:type :array
   :description (u/format "The %s returned as response to a GET index type request."
                          resource-pl)
   :items {:$ref (u/format "#/components/schemas/%s" item-schema)}})

(defn page-of-entities-meta-property [resource-pl]
  {:type :object
   :properties
   {:count
    {:type :integer
     :description (u/format "The count of all %s in this OLD." resource-pl)
     :example 1234}
    :page
    {:type :integer
     :description
     (u/format
      (str "The 0-based index of the page of %s being returned. This value only"
           " makes sense given a count of %s in the target OLD and the value of"
           " items-per-page.")
      resource-pl resource-pl)
     :default 0
     :example 0}
    :items-per-page
    {:type :integer
     :enum [1 5 10 50]
     :description (u/format "The maximum number of %s in a page of %s."
                            resource-pl resource-pl)
     :default 10
     :example 10}}
   :required [:count :page :items-per-page]
   :example {:count 1234
             :page 0
             :items-per-page 10}})

(defn page-of-entities-schema [resource-pl item-schema]
  (let [data (page-of-entities-data-property resource-pl item-schema)
        meta (page-of-entities-meta-property resource-pl)]
    {:type :object
     :properties {:data data
                  :meta meta}
     :required [:data
                :meta]
     :example {:data [] ;; TODO
               :meta (:example meta)}}))
