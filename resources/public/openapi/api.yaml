components:
  examples: {}
  parameters:
    acceptJSONHeaderParam:
      name: accept
      in: header
      description: The content type of the response body that the client will accept. This API requires that `application/json` be supplied here. Otherwise, a 406 response status will be returned.
      required: true
      schema:
        type: string
        enum: [application/json]
    oldSlugPathParam:
      name: old_slug
      in: path
      description: The slug of the target OLD.
      required: true
      schema: {type: string, pattern: '^[a-zA-Z0-9_-]+$'}
    userIDParam:
      name: user_id
      in: path
      description: The ID of the referenced user.
      required: true
      schema: {type: string, pattern: '^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'}
    userRegistrationKeyParam:
      name: user_registration_key
      in: path
      description: The registration key for the user that is being activated.
      required: true
      schema: {type: string, pattern: '^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'}
    formIDParam:
      name: form_id
      in: path
      description: The ID of the referenced form.
      required: true
      schema: {type: string, pattern: '^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'}
    pageQueryParam:
      name: page
      in: query
      description: The 0-based index of the page of forms requested. The first page is 0.
      required: false
      schema: {type: integer, default: 0}
    itemsPerPageQueryParam:
      name: items_per_page
      in: query
      description: The maximum number of items to return in each page of forms.
      required: false
      schema:
        type: integer
        enum: [1, 5, 10, 50]
        default: 10
  schemas:
    ErrorBadRequest400:
      type: object
      description: An error object for representing a 'Bad Request' response.
      properties:
        errors:
          type: array
          description: The errors expressing why the request was bad.
          minItems: 1
          items: {$ref: '#/components/schemas/Error'}
      required: [errors]
      example:
        errors:
        - {message: A valid string is required., error_code: invalid-string}
    FormsSearch:
      type: object
      properties:
        query:
          type: object
          properties:
            filter: {type: object}
            order_by: {type: object}
          required: [filter]
        paginator: {type: object}
      required: [query]
      example:
        query:
          filter: {}
    APIKey:
      type: object
      properties:
        id: {type: string, format: uuid, description: The ID of the API key. This must be sent as the value of the X-APP-ID header in order to authenticate., example: 0a8c5614-b544-4484-b06b-e24991135a20}
        user_id: {type: string, format: uuid, description: The ID of the user to which the API key belongs., example: 07d3bea2-5935-45e7-b8ed-68c221ed1ffb}
        key: {type: string, description: 'The unencrypted key of the API key. This will only be returned once: in the response body of a successful POST /login request.', example: ab57ba0a-e7e8-4a2e-9f70-42b094abd90f}
        created_at: {type: string, format: date-time, description: The timestamp of when the API key was created., example: '2023-08-20T01:34:11.780Z'}
        expires_at: {type: string, format: date-time, description: The timestamp of when the API key expires. This is typically two hours after API key creation., example: '2023-08-20T03:34:11.780Z'}
      required: [id, user_id, key, created_at, expires_at]
      example: {id: 0a8c5614-b544-4484-b06b-e24991135a20, user_id: f13cf3fe-dc85-4d66-a4b6-45aee976927b, key: ab57ba0a-e7e8-4a2e-9f70-42b094abd90f, created_at: '2023-08-20T01:34:11.780Z', expires_at: '2023-08-20T03:34:11.780Z'}
    Login:
      type: object
      properties:
        email: {type: string, description: The email of a registered user., example: handle@emailserver.com}
        password: {type: string, format: password, description: The password of the account with the matching the email.}
      required: [email, password]
    ErrorUnavailable:
      type: object
      description: This JSON response body describes an error where the web server is unavailable.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: The server is unavailable.}
        error_code: {type: string, description: A short error code for uniquely identifying and categorizing the failure., example: error-unavailable}
        data: {type: object, description: An optional object. This may include data that are relevant to understanding the error.}
      required: [message, error_code]
      example: {message: The server is unavailable., error_code: error-unavailable}
    EditFormData:
      type: object
      properties:
        grammaticalities:
          type: array
          description: The available grammaticalities that can be specified for forms in this OLD.
          items: {type: string, description: A grammaticality, example: '*'}
      required: [grammaticalities]
      example:
        grammaticalities: ['*']
    UserAndAPIKey:
      type: object
      properties:
        user: {$ref: '#/components/schemas/User'}
        apiKey: {$ref: '#/components/schemas/APIKey'}
      required: [user, apiKey]
    NewUserData:
      type: object
      properties: {}
      example: {}
    ErrorNotFound:
      type: object
      description: An error object for indicating that the client has failed to authenticate and is therefore prohibited from making this request.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: The referenced entity could not be found. Please ensure that the supplied identifier is correct.}
        error_code:
          type: string
          enum: [entity-not-found, unrecognized-operation, unrecognized-request-path, unrecognized-request-url]
          description: A short error code for uniquely identifying and categorizing the failure.
          example: entity-not-found
        data: {type: object, description: An optional object. This may include data that are relevant to understanding the error.}
      required: [message, error_code]
      example: {message: The referenced entity could not be found. Please ensure that the supplied identifier is correct., error_code: entity-not-found}
    User:
      type: object
      properties:
        id: {type: string, format: uuid, description: The ID of the user., example: 77b075f8-5bd5-4ff9-a714-ca8fdd1a7796}
        first_name: {type: string, description: The first name of the user., example: Anne}
        last_name: {type: string, description: The last name of the user., example: Boleyn}
        email: {type: string, format: email, description: The email address of the user., example: ab@gmail.com}
        is_superuser: {type: boolean, description: Boolean indicating whether the user is a superuser. Only superusers can do things like create new OLDs and new users., example: false, default: false}
        created_at: {type: string, format: date-time, description: The timestamp of when the user was created., example: '2023-08-20T01:34:11.780Z'}
        updated_at: {type: string, format: date-time, description: The timestamp of when the user was last updated., example: '2023-08-20T01:34:11.780Z'}
        destroyed_at: {type: string, format: date-time, nullable: true, description: The timestamp of when the user was destroyed; NULL if the user has not been destroyed., example: null}
      required: [id, first_name, last_name, email, created_at, updated_at, destroyed_at, is_superuser]
      example: {id: acddbb6a-31f6-41ac-90af-557d64082bcf, first_name: Anne, last_name: Boleyn, email: ab@gmail.com, is_superuser: false, created_at: '2023-08-20T01:34:11.780Z', updated_at: '2023-08-20T01:34:11.780Z', destroyed_at: null}
    PageOfForms:
      type: object
      properties:
        data:
          type: array
          description: The forms returned as response to a GET index type request.
          items: {$ref: '#/components/schemas/Form'}
        meta:
          type: object
          properties:
            count: {type: integer, description: The count of all forms in this OLD., example: 1234}
            page: {type: integer, description: The 0-based index of the page of forms being returned. This value only makes sense given a count of forms in the target OLD and the value of items-per-page., default: 0, example: 0}
            items_per_page:
              type: integer
              enum: [1, 5, 10, 50]
              description: The maximum number of forms in a page of forms.
              default: 10
              example: 10
          required: [count, page, items_per_page]
          example: {count: 1234, page: 0, items_per_page: 10}
      required: [data, meta]
      example:
        data:
        - {id: f9a19ceb-fca4-4e96-a5cb-cf1e329763a0, transcription: Les chiens mangaient., old_slug: lan-old, created_by: 9328472d-c4d4-4d02-b444-1dd0de3479d3, created_at: '2023-08-20T01:34:11.780Z', updated_at: '2023-08-20T01:34:11.780Z', destroyed_at: null}
        meta: {count: 1234, page: 0, items_per_page: 1}
    FormWrite:
      type: object
      properties:
        transcription: {type: string, description: The orthographic transcription of the form., example: Les chiens mangeaient.}
      required: [transcription]
      example: {transcription: Les chiens mangeaient.}
    ErrorServer:
      type: object
      description: This JSON response body describes an error, on the side of the server, encountered while attempting to respond to the request.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: An unexpected error occurred while attempting to respond to the request.}
        error_code: {type: string, description: A short error code for uniquely identifying and categorizing the failure., example: unexpected-error}
        data: {type: object, description: An optional object. This may include data that are relevant to understanding the error.}
      required: [message, error_code]
      example: {message: An unexpected error occurred while attempting to respond to the request., error_code: unexpected-error}
    UserWrite:
      type: object
      properties:
        first_name: {type: string, description: The first name of the user., example: Anne}
        last_name: {type: string, description: The last name of the user., example: Boleyn}
        email: {type: string, format: email, description: The email address of the user., example: ab@gmail.com}
        is_superuser: {type: boolean, description: Boolean indicating whether the user is a superuser. Only superusers can do things like create new OLDs and new users., example: false, default: false}
        password: {type: string, description: The password for the to-be-created user. This can never again be fetched from the API., example: '8#$(6)496!8@{}sadfoiuqwerjasdfjlASDFASDFASDF'}
      required: [first_name, last_name, email, password, is_superuser]
      example: {first_name: Anne, last_name: Boleyn, email: ab@gmail.com, password: long-arbitrary-lots-of-entropy, is_superuser: false}
    Form:
      type: object
      properties:
        id: {type: string, format: uuid, description: The unique identifier of the form. This is a UUID that is generated by the OLD., example: f9a19ceb-fca4-4e96-a5cb-cf1e329763a0}
        transcription: {type: string, description: The orthographic transcription of the form., example: Les chiens mangaient.}
        old_slug: {type: string, description: 'The unique identifier of the OLD. The slug should only contain letters, numbers, and the dash or the underscore.', example: lan-old}
        created_at: {type: string, format: date-time, description: The date and time at which the form was created., example: '2023-08-20T01:34:11.780Z'}
        updated_at: {type: string, format: date-time, description: The date and time at which the form was updated., example: '2023-08-20T01:34:11.780Z'}
        destroyed_at: {type: string, format: date-time, nullable: true, description: The date and time at which the form was destroyed; NULL if the user has not been destroyed., example: null}
        created_by: {type: string, format: uuid, description: The ID (UUID) of the user who created the form., example: 9328472d-c4d4-4d02-b444-1dd0de3479d3}
      required: [id, transcription, old_slug, created_by, created_at, updated_at, destroyed_at]
      example: {id: f9a19ceb-fca4-4e96-a5cb-cf1e329763a0, transcription: Les chiens mangaient., old_slug: lan-old, created_by: 9328472d-c4d4-4d02-b444-1dd0de3479d3, created_at: '2023-08-20T01:34:11.780Z', updated_at: '2023-08-20T01:34:11.780Z', destroyed_at: null}
    UserUpdate:
      type: object
      properties:
        first_name: {type: string, description: The first name of the user., example: Anne}
        last_name: {type: string, description: The last name of the user., example: Boleyn}
        email: {type: string, format: email, description: The email address of the user., example: ab@gmail.com}
        is_superuser: {type: boolean, description: Boolean indicating whether the user is a superuser. Only superusers can do things like create new OLDs and new users., example: false, default: false}
        password: {type: string, description: The password for the to-be-created user. This can never again be fetched from the API., example: '8#$(6)496!8@{}sadfoiuqwerjasdfjlASDFASDFASDF'}
      example: {first_name: Anne, last_name: Boleyn, email: ab@gmail.com, password: long-arbitrary-lots-of-entropy, is_superuser: false}
    ErrorNotFound404:
      type: object
      description: An error object for indicating that the endpoint or operation was not found.
      properties:
        errors:
          type: array
          description: Errors expressing details about the requests for which a handler could not be found.
          minItems: 1
          items: {$ref: '#/components/schemas/ErrorNotFound'}
      required: [errors]
      example:
        errors:
        - {message: The referenced entity could not be found. Please ensure that the supplied identifier is correct., error_code: entity-not-found}
    ErrorUnauthorized401:
      type: object
      description: An error object for indicating that the client has failed to authenticate and is therefore prohibited from making this request.
      properties:
        errors:
          type: array
          description: Errors expressing details of the failure to authenticate.
          minItems: 1
          items: {$ref: '#/components/schemas/ErrorUnauthorized'}
      required: [errors]
      example:
        errors:
        - {message: 'The client is not authenticated. Therefore, the client is not authorized to make this request.', error_code: unauthorized}
    ErrorUnauthorized:
      type: object
      description: An error object for indicating that the client has failed to authenticate and is therefore prohibited from making this request.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: 'The client is not authenticated. Therefore, the client is not authorized to make this request.'}
        error_code:
          type: string
          enum: [unauthorized, unauthenticated, unregistered-user]
          description: A short error code for uniquely identifying and categorizing the failure.
          example: unauthorized
        data: {type: object, description: An optional object. This may include data that are relevant to understanding the error.}
      required: [message, error_code]
      example: {message: 'The client is not authenticated. Therefore, the client is not authorized to make this request.', error_code: unauthorized}
    ErrorTooManyRequests:
      type: object
      description: An error object for representing a 'Too Many Requests' response.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: This client has made too many requests to this service. Please wait for 60 seconds before issuing any further requests.}
        error_code:
          type: string
          enum: [too-many-requests]
          description: A short error code for uniquely identifying and categorizing the failure.
          example: too-many-requests
        retry_after: {type: integer, minimum: 0, description: The delay in seconds. A non-negative integer indicating the seconds to delay after the response is received., example: 60}
      required: [message, error_code, retry_after]
      example: {message: This client has made too many requests to this service. Please wait for 60 seconds before issuing any further requests., error_code: too-many-requests, retry_after: 60}
    Error:
      type: object
      description: An error object for representing an arbitrary failure.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: A valid string is required.}
        error_code: {type: string, description: A short error code for uniquely identifying and categorizing the failure., example: invalid-string}
        data: {type: object, description: An optional object. This may include data that are relevant to understanding the error.}
      required: [message, error_code]
      example:
        message: A valid string is required.
        error_code: invalid-string
        data: {some: optional data structure}
    EditUserData:
      type: object
      properties: {}
      example: {}
    NewFormData:
      type: object
      properties:
        grammaticalities:
          type: array
          description: The available grammaticalities that can be specified for forms in this OLD.
          items: {type: string, description: A grammaticality, example: '*'}
      required: [grammaticalities]
      example:
        grammaticalities: ['*']
    ErrorTooManyRequests429:
      type: object
      description: An error object for representing a 'Too Many Requests' response.
      properties:
        errors:
          type: array
          description: Errors expressing details around issuing too many requests.
          minItems: 1
          items: {$ref: '#/components/schemas/ErrorTooManyRequests'}
      required: [errors]
      example:
        errors:
        - {message: This client has made too many requests to this service. Please wait for 60 seconds before issuing any further requests., error_code: too-many-requests, retry_after: 60}
    ErrorUnrecognizedAcceptHeader:
      type: object
      description: An error object for indicating that the client has failed to provide a recognized `Accept` header in the request.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.}
        error_code:
          type: string
          enum: [unrecognized-accept-header]
          description: A short error code for uniquely identifying and categorizing the failure.
          example: unrecognized-accept-header
        data: {type: object, description: An optional object. This may include data that are relevant to understanding the error.}
      required: [message, error_code]
      example: {message: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`., error_code: unrecognized-accept-header}
    ErrorServer500:
      type: object
      description: This JSON response body describes an error, on the side of the server, encountered while attempting to respond to the request.
      properties:
        errors:
          type: array
          description: The errors expressing why the request was bad.
          minItems: 1
          items: {$ref: '#/components/schemas/ErrorServer'}
      required: [errors]
      example:
        errors:
        - {message: An unexpected error occurred while attempting to respond to the request., error_code: unexpected-error}
    ErrorUnrecognizedAcceptHeader406:
      type: object
      description: An error object for indicating that the client has failed to provide a recognized `Accept` header in the request.
      properties:
        errors:
          type: array
          description: Errors expressing details of the failure to provide a recognized `Accept` header.
          minItems: 1
          items: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader'}
      required: [errors]
      example:
        errors:
        - {message: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`., error_code: unrecognized-accept-header}
    ErrorUnauthorized403:
      type: object
      description: An error object for indicating that the authenticated client lacks the role required in order to access the target resource in the target OLD.
      properties:
        errors:
          type: array
          description: Errors expressing details of the failure to authorize.
          minItems: 1
          items: {$ref: '#/components/schemas/ErrorUnauthorized'}
      required: [errors]
      example:
        errors:
        - {message: The client is not authorized to execute the target operation in the referenced OLD., error_code: unauthorized}
    ErrorUnavailable503:
      type: object
      description: This JSON response body describes an error where the web server is not available.
      properties:
        errors:
          type: array
          description: The errors expressing why the request was bad.
          minItems: 1
          items: {$ref: '#/components/schemas/ErrorUnavailable'}
      required: [errors]
      example:
        errors:
        - {message: The server is unavailable., error_code: error-unavailable}
    PageOfUsers:
      type: object
      properties:
        data:
          type: array
          description: The users returned as response to a GET index type request.
          items: {$ref: '#/components/schemas/User'}
        meta:
          type: object
          properties:
            count: {type: integer, description: The count of all users in the database., example: 1234}
            page: {type: integer, description: The 0-based index of the page of users being returned. This value only makes sense given a count of users and the value of items-per-page., default: 0, example: 0}
            items_per_page:
              type: integer
              enum: [1, 5, 10, 50]
              description: The maximum number of users in a page of users.
              default: 10
              example: 10
          required: [count, page, items_per_page]
          example: {count: 1234, page: 0, items_per_page: 10}
      required: [data, meta]
      example:
        data:
        - {id: acddbb6a-31f6-41ac-90af-557d64082bcf, first_name: Anne, last_name: Boleyn, email: ab@gmail.com, is_superuser: false, created_at: '2023-08-20T01:34:11.780Z', updated_at: '2023-08-20T01:34:11.780Z', destroyed_at: null}
        meta: {count: 1234, page: 0, items_per_page: 1}
  securitySchemes:
    x_api_key: {type: apiKey, in: header, name: X-API-KEY}
    x_app_id: {type: apiKey, in: header, name: X-APP-ID}
info:
  title: DativeBase HTTP API
  description: The DativeBase HTTP API is a RESTful HTTP API that communicates using JSON. This API allows developers to build systems that interact with DativeBase.
  version: 0.1.0
  contact: {name: DativeBase API Support, url: TODO, email: TODO@gmail.com}
openapi: 3.0.0
paths:
  /api/v1/{old_slug}/users:
    get:
      operationId: index_old_users
      summary: Return all users for the given OLD matching the supplied query.
      description: Return all users with access to the given OLD and matching the supplied query and pagination parameters.
      tags: [Users]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/pageQueryParam'}
      - {$ref: '#/components/parameters/oldSlugPathParam'}
      - {$ref: '#/components/parameters/itemsPerPageQueryParam'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request for users was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: A page of users.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PageOfUsers'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
  /api/v1/users/{user_id}/edit:
    get:
      operationId: edit_user
      summary: Return the data needed to update an existing user.
      description: Return the data needed to update an existing user.
      tags: [Users]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/userIDParam'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request for the data needed to update the specified user was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: The data needed to update the specified user.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EditUserData'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
  /api/v1/{old_slug}/forms:
    get:
      operationId: index_forms
      summary: Return all forms matching the supplied query.
      description: Return all forms matching the supplied query and pagination parameters.
      tags: [Forms]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/oldSlugPathParam'}
      - {$ref: '#/components/parameters/pageQueryParam'}
      - {$ref: '#/components/parameters/itemsPerPageQueryParam'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request for forms was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: A page of forms.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PageOfForms'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
    post:
      operationId: create_form
      summary: Create a new form.
      description: Create a new form then return the created form.
      tags: [Forms]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/oldSlugPathParam'}
      requestBody:
        description: The payload to create a form. This payload must conform to the schema FormWrite.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/FormWrite'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '201':
          description: The created form, including server-side-generated values such as the ID.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Form'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request to create a new form was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
  /api/v1/users/{user_id}:
    get:
      operationId: show_user
      summary: Return the user with the provided ID.
      description: Return the user with the provided ID.
      tags: [Users]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/userIDParam'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request for a specific user was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: The user.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
    delete:
      operationId: delete_user
      summary: Delete the user with the provided ID.
      description: Delete the user with the provided ID. This is a soft delete. The user data are not actually removed from the database. However, the system will behave as though the user no longer exists.
      tags: [Users]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/userIDParam'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request to delete the specified user was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: The deleted user.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
    put:
      operationId: update_user
      summary: Update the user with the provided ID.
      description: Update the user with the provided ID using the JSON payload of the request.
      tags: [Users]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/userIDParam'}
      requestBody:
        description: The payload representing the desired new state of the user. This payload must conform to the schema UserUpdate.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/UserUpdate'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request to update the specified user was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: The updated user.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
  /api/v1/{old_slug}/forms/{form_id}/edit:
    get:
      operationId: edit_form
      summary: Return the data needed to update an existing form.
      description: Return the data needed to update an existing form.
      tags: [Forms]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/oldSlugPathParam'}
      - {$ref: '#/components/parameters/formIDParam'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request for the data needed to update the specified form was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: The data needed to update the specified form.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EditFormData'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
  /api/v1/users:
    get:
      operationId: index_users
      summary: Return all users matching the supplied query.
      description: Return all users matching the supplied query and pagination parameters.
      tags: [Users]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/pageQueryParam'}
      - {$ref: '#/components/parameters/itemsPerPageQueryParam'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request for users was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: A page of users.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PageOfUsers'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
    post:
      operationId: create_user
      summary: Create a new user.
      description: Create a new user then return the created user.
      tags: [Users]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      requestBody:
        description: The payload to create a user. This payload must conform to the schema UserWrite.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/UserWrite'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '201':
          description: The created user, including server-side-generated values such as the ID.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request to create a new user was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
  /api/v1/{old_slug}/forms/{form_id}:
    get:
      operationId: show_form
      summary: Return the form with the provided ID.
      description: Return the form with the provided ID.
      tags: [Forms]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/oldSlugPathParam'}
      - {$ref: '#/components/parameters/formIDParam'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request for a specific form was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: The form.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Form'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
    delete:
      operationId: delete_form
      summary: Delete the form with the provided ID.
      description: Delete the form with the provided ID. This is a soft delete. The form data are not actually removed from the database. However, the system will behave as though the form no longer exists.
      tags: [Forms]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/oldSlugPathParam'}
      - {$ref: '#/components/parameters/formIDParam'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request to delete the specified form was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: The deleted form.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Form'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
    put:
      operationId: update_form
      summary: Update the form with the provided ID.
      description: Update the form with the provided ID using the JSON payload of the request.
      tags: [Forms]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/oldSlugPathParam'}
      - {$ref: '#/components/parameters/formIDParam'}
      requestBody:
        description: The payload representing the desired new state of the form. This payload must conform to the schema FormWrite.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/FormWrite'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request to update the specified form was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: The updated form.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Form'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
  /api/v1/{old_slug}/forms/new:
    get:
      operationId: new_form
      summary: Return the data needed to create a new form.
      description: Return the data needed to create a new form.
      tags: [Forms]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/oldSlugPathParam'}
      responses:
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '200':
          description: The data needed to create a new form.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NewFormData'}
  /api/v1/users/{user_id}/activate/{user_registration_key}:
    get:
      operationId: activate_user
      summary: Activate a user
      description: Activate a user
      tags: [Authentication]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      - {$ref: '#/components/parameters/userIDParam'}
      - {$ref: '#/components/parameters/userRegistrationKeyParam'}
      security: []
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request to activate the user was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: Successful user activation request. The user has been fully created. The user's registration status has been changed from 'pending' to 'registered'.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
  /api/v1/users/new:
    get:
      operationId: new_user
      summary: Return the data needed to create a new user.
      description: Return the data needed to create a new user.
      tags: [Users]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      responses:
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '200':
          description: The data needed to create a new user.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NewUserData'}
  /api/v1/login:
    post:
      operationId: login
      summary: Login and create a temporary API key
      description: Login and create a temporary API key
      tags: [Authentication]
      parameters:
      - {$ref: '#/components/parameters/acceptJSONHeaderParam'}
      security: []
      requestBody:
        description: The payload to login. This payload must conform to the schema Login.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Login'}
      responses:
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '404':
          description: The operation or endpoint of the request was not found. The server does not recognize the path of the requests or the path is recognized but the method is not.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorNotFound404'}
        '401':
          description: The client is not authenticated and therefore cannot perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '503':
          description: The DativeBase is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnavailable503'}
        '400':
          description: The request to login was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '200':
          description: Successful login request. The authenticated user and a newly-generated API key are both returned in the response. Subsequent requests to other endpoints must supply a valid API ID and key in the request in order to authenticate.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/UserAndAPIKey'}
        '403':
          description: The client is not authorized to perform this operation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized403'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '500':
          description: There was an error in DativeBase while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorServer500'}
security:
- x_api_key: []
  x_app_id: []
servers:
- {url: 'http://localhost:8080', description: Local development server}
- {url: 'http://localhost:8087', description: Local test server}
- {url: 'https://api.onlinelinguisticdatabase.org', description: Proposed production server for the DativeBase HTTP API.}
tags:
- {name: Authentication, description: Operations related to authentication.}
- {name: Forms, description: Operations on forms.}
- {name: Users, description: Operations on users.}
