components:
  examples: {}
  parameters: {}
  schemas:
    ErrorBadRequest400:
      type: object
      description: An error object for representing a 'Bad Request' response.
      properties:
        errors:
          type: array
          description: The errors expressing why the request was bad.
          minItems: 1
          items: {$ref: '#/components/schemas/Error'}
      required: [errors]
      example:
        errors:
        - {message: A valid string is required., error_code: invalid-string}
    PageOfForms:
      type: object
      properties:
        data:
          type: array
          description: The forms returned as response to a GET index type request.
          items: {$ref: '#/components/schemas/Form'}
        meta:
          type: object
          properties:
            current_token: {type: string, description: 'An opaque token that can be used to re-request the current page of forms. To request the page matching this token, pass the token as the value of pagination_token in the request query parameters, e.g., ?pagination_token=<PAGINATION_TOKEN>.', example: 6140w}
            next_token: {type: string, description: 'An opaque token that can be used to request the next page of forms that match the filter parameters of the current request. If there is no next page, then this property will be absent. To request the page matching this token, pass the token as the value of pagination_token in the request query parameters, e.g., ?pagination_token=<PAGINATION_TOKEN>.', example: 8140w}
            previous_token: {type: string, description: 'An opaque token that can be used to request the previous page of forms that match the filter parameters of the current request. If there is no previous page, then this property will be absent. To request the page matching this token, pass the token as the value of pagination_token in the request query parameters, e.g., ?pagination_token=<PAGINATION_TOKEN>.', example: 9140w}
          example: {current_token: 6140w, next_token: 8140w}
      required: [data, meta]
      example:
        data:
        - {id: f9a19ceb-fca4-4e96-a5cb-cf1e329763a0, transcription: Les chiens mangaient.}
        meta: {next_token: 8140w}
    FormWrite:
      type: object
      properties:
        transcription: {type: string, description: The orthographic transcription of the form., example: Les chiens mangaient.}
      required: [transcription]
      example: {transcription: Les chiens mangaient.}
    OLDUnavailable503:
      type: object
      description: This JSON response body describes an error where our public web server cannot reach OLD.
      properties:
        errors:
          type: array
          description: The errors expressing why the request was bad.
          minItems: 1
          items: {$ref: '#/components/schemas/OLDUnavailable'}
      required: [errors]
      example:
        errors:
        - {message: OLD is unavailable., error_code: old-unavailable}
    Form:
      type: object
      properties:
        id: {type: string, format: uuid, description: The unique identifier of the form. This is a UUID that is generated by the OLD., example: f9a19ceb-fca4-4e96-a5cb-cf1e329763a0}
        transcription: {type: string, description: The orthographic transcription of the form., example: Les chiens mangaient.}
      required: [id, transcription]
      example: {id: f9a19ceb-fca4-4e96-a5cb-cf1e329763a0, transcription: Les chiens mangaient.}
    ErrorUnauthorized401:
      type: object
      description: An error object for indicating that the client has failed to authenticate and is therefore prohibited from making this request.
      properties:
        errors:
          type: array
          description: Errors expressing details of the failure to authenticate.
          minItems: 1
          items: {$ref: '#/components/schemas/ErrorUnauthorized'}
      required: [errors]
      example:
        errors:
        - {message: 'The client is not authenticated. Therefore, the client is not authorized to make this request.', error_code: unauthorized}
    OLDError500:
      type: object
      description: This JSON response body describes an error on the side of OLD encountered while attempting to respond to the request.
      properties:
        errors:
          type: array
          description: The errors expressing why the request was bad.
          minItems: 1
          items: {$ref: '#/components/schemas/OLDError'}
      required: [errors]
      example:
        errors:
        - {message: An unexpected error occurred while attempting to respond to the request., error_code: old-unexpected-error}
    ErrorUnauthorized:
      type: object
      description: An error object for indicating that the client has failed to authenticate and is therefore prohibited from making this request.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: 'The client is not authenticated. Therefore, the client is not authorized to make this request.'}
        error_code:
          type: string
          enum: [unauthorized, unauthenticated]
          description: A short error code for uniquely identifying and categorizing the failure.
          example: unauthorized
        data: {type: object, description: An optional object. This may include data that are relevant to understanding the error.}
      required: [message, error_code]
      example: {message: 'The client is not authenticated. Therefore, the client is not authorized to make this request.', error_code: unauthorized}
    ErrorTooManyRequests:
      type: object
      description: An error object for representing a 'Too Many Requests' response.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: This client has made too many requests to this service. Please wait for 60 seconds before issuing any further requests.}
        error_code:
          type: string
          enum: [too-many-requests]
          description: A short error code for uniquely identifying and categorizing the failure.
          example: too-many-requests
        retry_after: {type: integer, minimum: 0, description: The delay in seconds. A non-negative integer indicating the seconds to delay after the response is received., example: 60}
      required: [message, error_code, retry_after]
      example: {message: This client has made too many requests to this service. Please wait for 60 seconds before issuing any further requests., error_code: too-many-requests, retry_after: 60}
    OLDUnavailable:
      type: object
      description: This JSON response body describes an error where our public web server cannot reach OLD.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: OLD is unavailable.}
        error_code: {type: string, description: A short error code for uniquely identifying and categorizing the failure., example: old-unavailable}
        data: {type: object, description: An optional object. This may include data that are relevant to understanding the error.}
      required: [message, error_code]
      example: {message: OLD is unavailable., error_code: old-unavailable}
    Error:
      type: object
      description: An error object for representing an arbitrary failure.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: A valid string is required.}
        error_code: {type: string, description: A short error code for uniquely identifying and categorizing the failure., example: invalid-string}
        data: {type: object, description: An optional object. This may include data that are relevant to understanding the error.}
      required: [message, error_code]
      example:
        message: A valid string is required.
        error_code: invalid-string
        data: {some: optional data structure}
    ErrorTooManyRequests429:
      type: object
      description: An error object for representing a 'Too Many Requests' response.
      properties:
        errors:
          type: array
          description: Errors expressing details around issuing too many requests.
          minItems: 1
          items: {$ref: '#/components/schemas/ErrorTooManyRequests'}
      required: [errors]
      example:
        errors:
        - {message: This client has made too many requests to this service. Please wait for 60 seconds before issuing any further requests., error_code: too-many-requests, retry_after: 60}
    ErrorUnrecognizedAcceptHeader:
      type: object
      description: An error object for indicating that the client has failed to provide a recognized `Accept` header in the request.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.}
        error_code:
          type: string
          enum: [unrecognized-accept-header]
          description: A short error code for uniquely identifying and categorizing the failure.
          example: unrecognized-accept-header
        data: {type: object, description: An optional object. This may include data that are relevant to understanding the error.}
      required: [message, error_code]
      example: {message: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`., error_code: unrecognized-accept-header}
    ErrorUnrecognizedAcceptHeader406:
      type: object
      description: An error object for indicating that the client has failed to provide a recognized `Accept` header in the request.
      properties:
        errors:
          type: array
          description: Errors expressing details of the failure to provide a recognized `Accept` header.
          minItems: 1
          items: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader'}
      required: [errors]
      example:
        errors:
        - {message: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`., error_code: unrecognized-accept-header}
    OLDError:
      type: object
      description: This JSON response body describes an error on the side of OLD encountered while attempting to respond to the request.
      properties:
        message: {type: string, description: A message describing the nature of the error. This should be written for human consumption and possible display to users., example: An unexpected error occurred while attempting to respond to the request.}
        error_code: {type: string, description: A short error code for uniquely identifying and categorizing the failure., example: old-unexpected-error}
        data: {type: object, description: An optional object. This may include data that are relevant to understanding the error.}
      required: [message, error_code]
      example: {message: An unexpected error occurred while attempting to respond to the request., error_code: old-unexpected-error}
  securitySchemes:
    api_key_auth: {type: apiKey, in: header, name: X-API-KEY}
info:
  title: Online Linguistic Database (OLD) HTTP API
  description: The OLD HTTP API is a RESTful HTTP API that communicates using JSON. This API allows developers to build systems that interact with OLD web services.
  version: 0.1.0
  contact: {name: OLD API Support, url: TODO, email: TODO}
openapi: 3.0.0
paths:
  /api/v1/forms:
    get:
      operationId: index_forms
      summary: Return all forms matching the supplied query.
      description: Return all forms matching the supplied query. TODO.
      tags: [FormsTag]
      parameters:
      - name: accept
        in: header
        description: The content type of the response body that the client will accept. This API requires that `application/json` be supplied here. Otherwise, a 406 response status will be returned.
        required: true
        schema:
          type: string
          enum: [application/json]
      - name: pagination_token
        in: query
        description: The pagination token. This token opaquely references a page of forms.
        required: false
        schema: {type: string, description: 'A OLD-generated pagination token, which opaquely specifies a page of forms.'}
      responses:
        '200':
          description: A page of forms.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PageOfForms'}
        '400':
          description: The request for forms was invalid.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorBadRequest400'}
        '401':
          description: The client is not authenticated and therefore cannot access this resource.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnauthorized401'}
        '406':
          description: Either no `Accept` header was provided or the provided header is not recognized. The only currently recognized accept header is `application/json`.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorUnrecognizedAcceptHeader406'}
        '429':
          description: Too many requests. This client has exceeded this API's request rate limit. The client may retry after the period specified in the response and the X header.
          headers:
            Retry_After:
              description: The number of seconds that the client must wait before making further requests to this API.
              schema: {type: integer, minimum: 0}
              example: 60
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ErrorTooManyRequests429'}
        '500':
          description: There was an error in OLD while attempting to respond to the request. The operators of this service will be alerted to the issue and will address it in a timely manner.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OLDError500'}
        '503':
          description: The OLD is unavailable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OLDUnavailable503'}
security:
- api_key_auth: []
servers:
- {url: 'http://localhost:8080', description: Local development server}
- {url: 'https://api.onlinelinguisticdatabase.org', description: Proposed production server for the OLD HTTP API.}
tags:
- {name: FormsTag, description: Operations on forms.}
